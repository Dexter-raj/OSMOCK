#include <iostream>
using namespace std;

// Function to find the least recently used page
int findLRU(int time[], int n) {
    int min_time = time[0], pos = 0;
    for (int i = 1; i < n; i++) {
        if (time[i] < min_time) {
            min_time = time[i];
            pos = i;
        }
    }
    return pos;
}

// LRU Page Replacement Algorithm
void lruPageReplacement(int pages[], int n, int frames) {
    int frame[frames], time[frames];
    int count = 0, pageFaults = 0;

    // Initialize the frames and time arrays
    for (int i = 0; i < frames; i++) {
        frame[i] = -1; // Empty frame
        time[i] = 0;   // Time since last use
    }

    // Iterate through all pages
    for (int i = 0; i < n; i++) {
        bool found = false;

        // Check if the page is already in one of the frames
        for (int j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) {
                found = true;
                time[j] = ++count; // Update time for the used page
                break;
            }
        }

        // If the page is not found (Page Fault)
        if (!found) {
            // If there's an empty frame, use it
            for (int j = 0; j < frames; j++) {
                if (frame[j] == -1) {
                    frame[j] = pages[i];
                    time[j] = ++count;
                    pageFaults++;
                    found = true;
                    break;
                }
            }

            // If no empty frame, replace the least recently used page
            if (!found) {
                int lru = findLRU(time, frames);
                frame[lru] = pages[i];
                time[lru] = ++count;
                pageFaults++;
            }
        }

        // Display the current state of frames
        cout << "Frames "<<i+1<<": ";
        for (int j = 0; j < frames; j++) {
            if (frame[j] != -1)
                cout << frame[j] << " ";
            else
                cout << "- ";
        }
        cout << endl;
    }

    // Output the total number of page faults
    cout << "Total Page Faults = " << pageFaults << endl;
}

// Main function
int main() {
    int n, frames;

    // Input the number of pages
    cout << "Enter the number of pages: ";
    cin >> n;

    // Input the page sequence
    int pages[n];
    cout << "Enter the page sequence: ";
    for (int i = 0; i < n; i++) {
        cin >> pages[i];
    }

    // Input the number of frames
    cout << "Enter the number of frames: ";
    cin >> frames;

    // Call the LRU Page Replacement function
    lruPageReplacement(pages, n, frames);

    return 0;
}
