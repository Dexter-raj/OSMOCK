#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdlib.h>

int main(int argc, char* argv[]) {
    int count, i;
    int status;
    
    count = argc - 1;  // Number of arguments passed to the program
    char* temp[count + 1];  // Array to hold the arguments for execv

    // Copy arguments from argv to temp
    for (i = 0; i < count; i++) {
        temp[i] = argv[i + 1];
    }
    temp[count] = NULL;  // Ensure last element is NULL for execv

    // Bubble sort the arguments as strings (if sorting is needed)
    for (i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            if (atoi(temp[j]) > atoi(temp[j + 1])) {
                // Swap the pointers if needed
                char* res = temp[j];
                temp[j] = temp[j + 1];
                temp[j + 1] = res;
            }
        }
    }

    pid_t pid = fork();  // Create a child process

    if (pid == 0) {
        // Child process
        execv(temp[0], temp);  // Execute the first argument as a command
        perror("execv failed");  // Only printed if execv fails
        exit(EXIT_FAILURE);
    } else if (pid > 0) {
        // Parent process
        wait(&status);  // Wait for the child process to complete
        printf("\nParent Process\n");
        printf("Parent process id: %d\n", getpid());
    } else {
        // Fork failed
        perror("fork failed");
        return EXIT_FAILURE;
    }

    return 0;
}
