#include <stdio.h>
#include <stdlib.h>
#include <unistd.h> // For getpid() and getppid()

// Binary search function
int binsearch(int arr[], int low, int high, int target) {
    if (high >= low) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == target)
            return mid;
        if (arr[mid] > target)
            return binsearch(arr, low, mid - 1, target);
        return binsearch(arr, mid + 1, high, target);
    }
    return -1;
}

// Function to sort the array (Bubble Sort used for simplicity)
void sortArray(int arr[], int len) {
    for (int i = 0; i < len - 1; i++) {
        for (int j = 0; j < len - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main(int argc, char *argv[]) {
    int len = argc - 1;
    int arr[len];
    int target;

    // Print process information
    printf("Process ID: %d\n", getpid());
    printf("Parent Process ID: %d\n", getppid());

    // Fill the array with command-line arguments
    printf("Count of arguments: %d\n", argc);
    for (int i = 1; i < argc; i++) {
        arr[i - 1] = atoi(argv[i]);
    }

    // Sort the array
    sortArray(arr, len);

    // Print the sorted array
    printf("\nSorted array:\n");
    for (int i = 0; i < len; i++) {
        printf("%d\t", arr[i]);
    }
    printf("\n");

    // Ask the user for a number to search
    printf("\nEnter number to search: ");
    scanf("%d", &target);

    // Perform binary search
    int result = binsearch(arr, 0, len - 1, target);
    if (result != -1) {
        printf("Number is present at index: %d\n", result);
    } else {
        printf("Number is absent\n");
    }

    return 0;
}
